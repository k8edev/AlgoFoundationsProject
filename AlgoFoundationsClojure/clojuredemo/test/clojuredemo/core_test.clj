(ns test.clojuredemo.core_test
  (:require [clojure.test :refer :all]
            [src.clojuredemo.core :refer :all]))

(deftest tail-recursive-factorial-test
    (is (= 3628800 (src.clojuredemo.core/tail-recursive-factorial 10))))

(deftest recursive-factorial-test
  (is (= 3628800 (src.clojuredemo.core/tail-recursive-factorial 10))))

(deftest tail-recursive-fibonacci-test
  (is (= 55 (src.clojuredemo.core/tail-recursive-fibonacci 10))))

(deftest recursive-fibonacci-test
  (is (= 55 (src.clojuredemo.core/recursive-fibonacci 10))))

(deftest tail-recursive-factorial-timing-test
  (println "Tail-recursive factorial")
  (time (tail-recursive-factorial 1))
  (time (tail-recursive-factorial 2))
  (time (tail-recursive-factorial 3))
  (time (tail-recursive-factorial 4))
  (time (tail-recursive-factorial 5))
  (time (tail-recursive-factorial 6))
  (time (tail-recursive-factorial 7))
  (time (tail-recursive-factorial 8))
  (time (tail-recursive-factorial 9))
  (time (tail-recursive-factorial 10))
  (time (tail-recursive-factorial 11))
  (time (tail-recursive-factorial 12))
  (time (tail-recursive-factorial 13))
  (time (tail-recursive-factorial 14))
  (time (tail-recursive-factorial 15))
  (time (tail-recursive-factorial 16))
  (time (tail-recursive-factorial 17))
  (time (tail-recursive-factorial 18))
  (time (tail-recursive-factorial 19))
  (time (tail-recursive-factorial 20))
  (is (= 1 1)))

(deftest recursive-factorial-timing-test
  (println "Recursive-factorial")
  (time (recursive-factorial 1))
  (time (recursive-factorial 2))
  (time (recursive-factorial 3))
  (time (recursive-factorial 4))
  (time (recursive-factorial 5))
  (time (recursive-factorial 6))
  (time (recursive-factorial 7))
  (time (recursive-factorial 8))
  (time (recursive-factorial 9))
  (time (recursive-factorial 10))
  (time (recursive-factorial 11))
  (time (recursive-factorial 12))
  (time (recursive-factorial 13))
  (time (recursive-factorial 14))
  (time (recursive-factorial 15))
  (time (recursive-factorial 16))
  (time (recursive-factorial 17))
  (time (recursive-factorial 18))
  (time (recursive-factorial 19))
  (time (recursive-factorial 20))
  (is (= 1 1)))

(deftest tail-recursive-fibonacci-timing-test
  (println "Tail-recursive fibonacci")
  (time (tail-recursive-fibonacci 1))
  (time (tail-recursive-fibonacci 2))
  (time (tail-recursive-fibonacci 3))
  (time (tail-recursive-fibonacci 4))
  (time (tail-recursive-fibonacci 5))
  (time (tail-recursive-fibonacci 6))
  (time (tail-recursive-fibonacci 7))
  (time (tail-recursive-fibonacci 8))
  (time (tail-recursive-fibonacci 9))
  (time (tail-recursive-fibonacci 10))
  (time (tail-recursive-fibonacci 11))
  (time (tail-recursive-fibonacci 12))
  (time (tail-recursive-fibonacci 13))
  (time (tail-recursive-fibonacci 14))
  (time (tail-recursive-fibonacci 15))
  (time (tail-recursive-fibonacci 16))
  (time (tail-recursive-fibonacci 17))
  (time (tail-recursive-fibonacci 18))
  (time (tail-recursive-fibonacci 19))
  (time (tail-recursive-fibonacci 20))
  (is (= 1 1)))

(deftest recursive-fibonacci-timing-test
  (println "Recursive fibonacci")
  (time (recursive-fibonacci 1))
  (time (recursive-fibonacci 2))
  (time (recursive-fibonacci 3))
  (time (recursive-fibonacci 4))
  (time (recursive-fibonacci 5))
  (time (recursive-fibonacci 6))
  (time (recursive-fibonacci 7))
  (time (recursive-fibonacci 8))
  (time (recursive-fibonacci 9))
  (time (recursive-fibonacci 10))
  (time (recursive-fibonacci 11))
  (time (recursive-fibonacci 12))
  (time (recursive-fibonacci 13))
  (time (recursive-fibonacci 14))
  (time (recursive-fibonacci 15))
  (time (recursive-fibonacci 16))
  (time (recursive-fibonacci 17))
  (time (recursive-fibonacci 18))
  (time (recursive-fibonacci 19))
  (time (recursive-fibonacci 20))
  (is (= 1 1)))